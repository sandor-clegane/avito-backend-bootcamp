// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/flat/interface.go

// Package mock_flat is a generated GoMock package.
package mock_flat

import (
	model "avito-backend-bootcamp/internal/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlatRepository is a mock of FlatRepository interface.
type MockFlatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlatRepositoryMockRecorder
}

// MockFlatRepositoryMockRecorder is the mock recorder for MockFlatRepository.
type MockFlatRepositoryMockRecorder struct {
	mock *MockFlatRepository
}

// NewMockFlatRepository creates a new mock instance.
func NewMockFlatRepository(ctrl *gomock.Controller) *MockFlatRepository {
	mock := &MockFlatRepository{ctrl: ctrl}
	mock.recorder = &MockFlatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatRepository) EXPECT() *MockFlatRepositoryMockRecorder {
	return m.recorder
}

// FlatListByHouseID mocks base method.
func (m *MockFlatRepository) FlatListByHouseID(ctx context.Context, houseID int64) ([]*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlatListByHouseID", ctx, houseID)
	ret0, _ := ret[0].([]*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlatListByHouseID indicates an expected call of FlatListByHouseID.
func (mr *MockFlatRepositoryMockRecorder) FlatListByHouseID(ctx, houseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlatListByHouseID", reflect.TypeOf((*MockFlatRepository)(nil).FlatListByHouseID), ctx, houseID)
}

// GetFlat mocks base method.
func (m *MockFlatRepository) GetFlat(ctx context.Context, ID int64) (*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlat", ctx, ID)
	ret0, _ := ret[0].(*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlat indicates an expected call of GetFlat.
func (mr *MockFlatRepositoryMockRecorder) GetFlat(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlat", reflect.TypeOf((*MockFlatRepository)(nil).GetFlat), ctx, ID)
}

// SaveFlat mocks base method.
func (m *MockFlatRepository) SaveFlat(ctx context.Context, houseID, price, fooms int64) (*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFlat", ctx, houseID, price, fooms)
	ret0, _ := ret[0].(*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFlat indicates an expected call of SaveFlat.
func (mr *MockFlatRepositoryMockRecorder) SaveFlat(ctx, houseID, price, fooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFlat", reflect.TypeOf((*MockFlatRepository)(nil).SaveFlat), ctx, houseID, price, fooms)
}

// UpdateFlat mocks base method.
func (m *MockFlatRepository) UpdateFlat(ctx context.Context, flat *model.Flat) (*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlat", ctx, flat)
	ret0, _ := ret[0].(*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlat indicates an expected call of UpdateFlat.
func (mr *MockFlatRepositoryMockRecorder) UpdateFlat(ctx, flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlat", reflect.TypeOf((*MockFlatRepository)(nil).UpdateFlat), ctx, flat)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockEventRepository) PublishEvent(ctx context.Context, eventType model.EventType, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", ctx, eventType, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockEventRepositoryMockRecorder) PublishEvent(ctx, eventType, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockEventRepository)(nil).PublishEvent), ctx, eventType, payload)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key int64) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Remove mocks base method.
func (m *MockCache) Remove(key int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", key)
}

// Remove indicates an expected call of Remove.
func (mr *MockCacheMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCache)(nil).Remove), key)
}

// Set mocks base method.
func (m *MockCache) Set(key int64, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value)
}
