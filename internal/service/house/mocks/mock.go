// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/house/interface.go

// Package mock_house is a generated GoMock package.
package mock_house

import (
	model "avito-backend-bootcamp/internal/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHouseRepository is a mock of HouseRepository interface.
type MockHouseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHouseRepositoryMockRecorder
}

// MockHouseRepositoryMockRecorder is the mock recorder for MockHouseRepository.
type MockHouseRepositoryMockRecorder struct {
	mock *MockHouseRepository
}

// NewMockHouseRepository creates a new mock instance.
func NewMockHouseRepository(ctrl *gomock.Controller) *MockHouseRepository {
	mock := &MockHouseRepository{ctrl: ctrl}
	mock.recorder = &MockHouseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseRepository) EXPECT() *MockHouseRepositoryMockRecorder {
	return m.recorder
}

// SaveHouse mocks base method.
func (m *MockHouseRepository) SaveHouse(ctx context.Context, address, developer string, year int64) (*model.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHouse", ctx, address, developer, year)
	ret0, _ := ret[0].(*model.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveHouse indicates an expected call of SaveHouse.
func (mr *MockHouseRepositoryMockRecorder) SaveHouse(ctx, address, developer, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHouse", reflect.TypeOf((*MockHouseRepository)(nil).SaveHouse), ctx, address, developer, year)
}
